client(generated_date, laser_raptor_version, package_name, class_name, methods) ::= <<
// GENERATED ON <generated_date> BY LASER RAPTOR VERSION <laser_raptor_version>
package <package_name>;

import io.reactivesocket.Payload;
import laser.raptor.core.client.LaserRaptorClientService;
import laser.raptor.core.client.LaserRaptorClientServiceFactory;
import laser.raptor.core.client.ReactiveSocketLoadBalancer;
import laser.raptor.core.serialization.JacksonUtil;
import rx.Observable;

import java.nio.ByteBuffer;


public class <class_name> extends LaserRaptorClientService {
    protected <class_name>() {}

    protected <class_name>(String host, int port) {
        super(host, port);
    }

    <methods>

    public static <class_name> getInstance(
        ReactiveSocketLoadBalancer.SocketAddressFactory socketAddressFactory,
        ReactiveSocketLoadBalancer.ClosedConnectionsProvider closedConnectionsProvider) {
            return LaserRaptorServiceFactory
                .getLaserRaptorService(
                    <class_name>.class,
                    socketAddressFactory,
                    closedConnectionsProvider,
                    ReactiveSocketLoadBalancer.WEB_SOCKET_FACTORY,
                    ReactiveSocketLoadBalancer.LEAST_LOADED_SELECTOR);
     }

    public static <class_name> getInstance(ReactiveSocketLoadBalancer.SocketAddressFactory socketAddressFactory) {
        return LaserRaptorServiceFactory
            .getLaserRaptorService(
                <class_name>.class,
                socketAddressFactory,
                ReactiveSocketLoadBalancer.NO_CHANGE_PROVIDER,
                ReactiveSocketLoadBalancer.WEB_SOCKET_FACTORY,
                ReactiveSocketLoadBalancer.LEAST_LOADED_SELECTOR);
    }
}
>>

fire(methodName, requestType, requestName, serviceId, methodId) ::= <<
    public Observable\<Void\> <methodName>(<requestType> <requestName>) {
        return Observable.defer(() -> {
            ByteBuffer requestBuffer = JacksonUtil.writeValueAsByteBuffer(<requestName>);
            return handleFireAndForget(<serviceId>, <methodId>, requestBuffer);
        });
    }

>>

request(methodName, requestType, requestName, responseType, serviceId, methodId) ::= <<
    public Observable\<<responseType>\> <methodName>(<requestType> <requestName>) {
        Observable<Payload> defer = Observable.<Payload>defer(() -> {
            ByteBuffer requestBuffer = JacksonUtil.writeValueAsByteBuffer(<requestName>);
            return handleRequestResponse(<serviceId>, <methodId>, requestBuffer);
        });

        return defer.map(payload -> {
            ByteBuffer responseBuffer = payload.getData();
            JacksonUtil.readValueFromByteBuffer(responseBuffer, <responseType>.class);
        });
    }

>>

requestN(methodName, requestType, requestName, responseType, serviceId, methodId) ::= <<
    public Observable\<<responseType>\> <methodName>(<requestType> <requestName>) {
        Observable<Payload> defer = Observable.<Payload>defer(() -> {
            ByteBuffer requestBuffer = JacksonUtil.writeValueAsByteBuffer(<requestName>);
            return handleRequestStream(<serviceId>, <methodId>, requestBuffer);
        });

        return defer.map(payload -> {
            ByteBuffer responseBuffer = payload.getData();
            JacksonUtil.readValueFromByteBuffer(responseBuffer, <responseType>.class);
        });
    }

>>

subscription(methodName, requestType, requestName, responseType, serviceId, methodId) ::= <<
    public Observable\<<responseType>\> <methodName>(<requestType> <requestName>) {
        Observable<Payload> defer = Observable.<Payload>defer(() -> {
            ByteBuffer requestBuffer = JacksonUtil.writeValueAsByteBuffer(<requestName>);
            return handleSubscription(<serviceId>, <methodId>, requestBuffer);
        });

        return defer.map(payload -> {
            ByteBuffer responseBuffer = payload.getData();
            JacksonUtil.readValueFromByteBuffer(responseBuffer, <responseType>.class);
        });

    }

>>

channel(methodName, requestType, requestName, responseType, serviceId, methodId) ::= <<
    public Observable\<<responseType>\> <methodName>(Observable\<<requestType>\> <requestName>) {
        Observable<Payload> defer = Observable.<Payload>defer(() -> {
            ByteBuffer requestBuffer = JacksonUtil.writeValueAsByteBuffer(<requestName>);
            return handleChannel(<serviceId>, <methodId>, requestBuffer);
        });

        return defer.map(payload -> {
            ByteBuffer responseBuffer = payload.getData();
            JacksonUtil.readValueFromByteBuffer(responseBuffer, <responseType>.class);
        });
    }

>>