service(generated_date, laser_raptor_version, package_name, class_name, class_body) ::= <<
// GENERATED ON <generated_date> BY LASER RAPTOR VERSION <laser_raptor_version>
package <package_name>;

import laser.raptor.core.server.LaserRaptorServerFunctionMetadata;
import laser.raptor.core.server.server_functions.RequestResponseServerFunction;
import laser.raptor.core.server.server_functions.FireAndForgetServerFunction;
import laser.raptor.core.server.server_functions.SubscribeServerFunction;
import laser.raptor.core.server.server_functions.RequestNServerFunction;
import laser.raptor.core.server.server_functions.ChannelServerFunction;
import laser.raptor.core.server.NotImplementedException;

import com.google.inject.Singleton;

import rx.Observable;

<class_body>

>>

fire(hash, method_id, request_type, service_name, class_name, service_id, request_type_name) ::= <<
@LaserRaptorServerFunctionMetadata(
        hash =  <hash>L,
        methodId = <method_id>,
        requestClass = <request_type>.class,
        responseClass = Void.class,
        serviceClass = <service_name>_<class_name>.class,
        serviceId = <service_id>,
                                      serviceName = "<service_name>",
                                      methodName = "<class_name>")
@Singleton
public class <service_name>_<class_name> implements FireAndForgetServerFunction\<<request_type>\> {
    @Override
    public Observable\<Void\> apply(Observable\<<request_type>\> <request_type_name>) {
        throw new NotImplementedException();
    }
}

>>

request(hash, method_id, request_type, response_type, service_name, class_name, service_id, request_type_name) ::= <<
@LaserRaptorServerFunctionMetadata(
        hash =  <hash>L,
        methodId = <method_id>,
        requestClass = <request_type>.class,
        responseClass = <response_type>.class,
        serviceClass = <service_name>_<class_name>.class,
        serviceId = <service_id>,
                                      serviceName = "<service_name>",
                                      methodName = "<class_name>")
@Singleton
public class <service_name>_<class_name> implements RequestResponseServerFunction\<<request_type>, <response_type>\> {
    @Override
    public Observable\<<response_type>\> apply(Observable\<<request_type>\> <request_type_name>) {
        throw new NotImplementedException();
    }
}

>>

requestN(hash, method_id, request_type, response_type, service_name, class_name, service_id, request_type_name) ::= <<
  @LaserRaptorServerFunctionMetadata(
          hash =  <hash>L,
          methodId = <method_id>,
          requestClass = <request_type>.class,
          responseClass = <response_type>.class,
          serviceClass = <service_name>_<class_name>.class,
          serviceId = <service_id>)
@Singleton
  public class <service_name>_<class_name> implements RequestNServerFunction\<<request_type>, <response_type>\> {
      @Override
      public Observable\<<response_type>\> apply(Observable\<<request_type>\> <request_type_name>) {
          throw new NotImplementedException();
      }
  }

>>

subscription(hash, method_id, request_type, response_type, service_name, class_name, service_id, request_type_name) ::= <<
  @LaserRaptorServerFunctionMetadata(
          hash =  <hash>L,
          methodId = <method_id>,
          requestClass = <request_type>.class,
          responseClass = <response_type>.class,
          serviceClass = <service_name>_<class_name>.class,
          serviceId = <service_id>,
                                        serviceName = "<service_name>",
                                        methodName = "<class_name>")
@Singleton
  public class <service_name>_<class_name> implements SubscribeServerFunction\<<request_type>, <response_type>\> {
      @Override
      public Observable\<<response_type>\> apply(Observable\<<request_type>\> <request_type_name>) {
          throw new NotImplementedException();
      }
  }

>>

channel(hash, method_id, request_type, response_type, service_name, class_name, service_id, request_type_name) ::= <<
  @LaserRaptorServerFunctionMetadata(
          hash =  <hash>L,
          methodId = <method_id>,
          requestClass = <request_type>.class,
          responseClass = <response_type>.class,
          serviceClass = <service_name>_<class_name>.class,
          serviceId = <service_id>,
                                        serviceName = "<service_name>",
                                        methodName = "<class_name>")
@Singleton
  public class <service_name>_<class_name> implements ChannelServerFunction\<<request_type>, <response_type>\> {
      @Override
      public Observable\<<response_type>\> apply(Observable\<<request_type>\> <request_type_name>) {
          throw new NotImplementedException();
      }
  }

>>